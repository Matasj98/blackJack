{"version":3,"sources":["Helpers/calculateDeckPoints.js","Components/Card/Card.component.js","Components/Intro/Intro.component.js","Components/Button/Button.component.js","Actions/action.js","Thunk/stand.js","Helpers/generateDeck.js","App.js","Thunk/setDeck.js","Thunk/hit.js","Thunk/enemyHit.js","Reducers/gameData.js","Reducers/index.js","index.js"],"names":["calculatePoints","deck","total","map","Number","isInteger","number","Card","enemy","className","data","index","key","suit","Intro","Button","click","text","onClick","setDeck","type","setPlayerDeck","playerDeck","setEnemyDeck","enemyDeck","setWinner","winner","stand","dispatch","getState","gameData","generateDeck","cards","suits","i","length","j","push","App","start","props","onSetGenerateDeck","onSetDecks","reset","onReset","onEnemyHit","onStand","this","onHit","React","Component","connect","state","disptach","deckCopy","random","Math","floor","splice","slice","setDeckAction","copyDeck","concat","randomChoice","copyEnemyDeck","randomCard","initialState","playerPoints","enemyPoints","appReducer","combineReducers","action","store","createStore","undefined","applyMiddleware","Thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fa2ba62.chunk.js","sourcesContent":["export const calculatePoints = deck => {\n    let total = 0;\n    deck.map(deck => {\n      if (Number.isInteger(deck.number)) {\n        return (total += deck.number);\n      } else if (deck.number !== \"A\") {\n        return (total += 10);\n      } else {\n        if (total + 11 <= 21) {\n          return (total += 11);\n        } else {\n          return (total += 1);\n        }\n      }\n    });\n    return total;\n  };","import React from \"react\";\nimport { calculatePoints } from \"../../Helpers/calculateDeckPoints\";\nimport \"./card.css\";\n\nconst Card = ({ deck, enemy }) => {\n  return (\n    <div className=\"Card\">\n      {enemy === false ? (\n        <div>****</div>\n      ) : (\n        <div>Points: {calculatePoints(deck)}</div>\n      )}\n      <div className=\"CardBox\">\n        {deck.map((data, index) => {\n          if (enemy === false && index === 1) {\n            return (\n              <div key={index} className=\"CardSize\">\n                * *\n              </div>\n            );\n          }\n          return (\n            <div key={index} className=\"CardSize\">\n              {data.number}\n              {data.suit}\n            </div>\n          );\n        })}\n      </div>\n      <br />\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport \"./intro.css\";\n\nconst Intro = () => {\n  return (\n    <div className=\"Intro\">\n      <h1>BLACKJACK</h1>\n      <h4>\n        Your goal is to have more points than enemy, BUT not exceeding 21 points\n        OR you'll LOSE\n      </h4>\n      <h4>Press HIT to take another card and STAND to see RESULTS</h4>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React from \"react\";\nimport \"./button.css\";\n\nconst Button = ({ click, text }) => {\n  return (\n    <div className=\"Button\">\n      <button onClick={click}>{text}</button>\n    </div>\n  );\n};\n\nexport default Button;\n","export const setPlayerPoints = playerPoints => ({\n  type: \"setPlayerPoints\",\n  playerPoints\n});\n\nexport const setEnemyPoints = enemyPoints => ({\n  type: \"setEnemyPoints\",\n  enemyPoints\n});\n\nexport const setDeck = deck => ({\n  type: \"setDeck\",\n  deck\n});\n\nexport const setPlayerDeck = playerDeck => ({\n  type: \"setPlayerDeck\",\n  playerDeck\n});\n\nexport const setEnemyDeck = enemyDeck => ({\n  type: \"setEnemyDeck\",\n  enemyDeck\n});\n\nexport const setWinner = winner => ({\n  type: \"setWinner\",\n  winner\n});\n\nexport const resetApp = () => ({\n  type: 'RESET_APP'\n})\n","import { calculatePoints } from \"../Helpers/calculateDeckPoints\";\nimport { setWinner } from \"../Actions/action\";\n\nexport const stand = () => (dispatch, getState) => {\n  const enemyDeck = calculatePoints(getState().gameData.enemyDeck);\n  const playerDeck = calculatePoints(getState().gameData.playerDeck);\n  if (\n    (enemyDeck < playerDeck && playerDeck <= 21) ||\n    (enemyDeck > 21 && playerDeck <= 21)\n  ) {\n    dispatch(setWinner(\"You Won!\"));\n  } else if (enemyDeck === playerDeck) {\n    dispatch(setWinner(\"DRAW!\"));\n  } else if (enemyDeck > 21 && playerDeck > 21) {\n    dispatch(setWinner(\"Both Lost...\"));\n  } else {\n    dispatch(setWinner(\"You Lost...\"));\n  }\n};\n","export const generateDeck = () => {\n  const cards = [2, 3, 4, 5, 6, 7, 8, 9, 10, \"J\", \"Q\", \"K\", \"A\"];\n  const suits = [\"♦\", \"♣\", \"♥\", \"♠\"];\n  const deck = [];\n  for (let i = 0; i < cards.length; i++) {\n    for (let j = 0; j < suits.length; j++) {\n      deck.push({ number: cards[i], suit: suits[j] });\n    }\n  }\n  return deck;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Card from \"./Components/Card/Card.component\";\nimport Intro from \"./Components/Intro/Intro.component\";\nimport Button from \"./Components/Button/Button.component\";\nimport { connect } from \"react-redux\";\nimport { setDeck, resetApp } from \"./Actions/action\";\nimport { setDeck as setDeckThunk } from \"./Thunk/setDeck\";\nimport { hit } from \"./Thunk/hit\";\nimport { enemyHit } from \"./Thunk/enemyHit\";\nimport { stand } from \"./Thunk/stand\";\nimport { generateDeck } from \"./Helpers/generateDeck\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.start();\n  }\n\n  start = () => {\n    this.props.onSetGenerateDeck(generateDeck());\n    this.props.onSetDecks();\n  };\n\n  reset = () => {\n    this.props.onReset();\n    this.start();\n  };\n\n  stand = () => {\n    this.props.onEnemyHit();\n    this.props.onStand();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Intro />\n        <div className=\"u-textAlignCenter\">\n          {this.props.winner === null ? (\n            <div>\n              <Button click={this.props.onHit} text=\"Hit\" />\n              <Button click={this.stand} text=\"Stand\" />\n            </div>\n          ) : null}\n          <p>YOU</p>\n          <Card deck={this.props.playerDeck} />\n          <p>ENEMY</p>\n          <Card\n            deck={this.props.enemyDeck}\n            enemy={this.props.winner === null ? false : true}\n          />\n        </div>\n        <h1>{this.props.winner}</h1>\n        <Button click={this.reset} text=\"New Game\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  playerDeck: state.gameData.playerDeck,\n  enemyDeck: state.gameData.enemyDeck,\n  winner: state.gameData.winner\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSetGenerateDeck: deck => dispatch(setDeck(deck)),\n  onSetDecks: () => dispatch(setDeckThunk()),\n  onHit: () => dispatch(hit()),\n  onEnemyHit: () => dispatch(enemyHit()),\n  onStand: () => dispatch(stand()),\n  onReset: () => dispatch(resetApp())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { setPlayerDeck, setEnemyDeck } from \"../Actions/action\";\nimport { setDeck as setDeckAction } from \"../Actions/action\";\n\nexport const setDeck = () => (disptach, getState) => {\n  let cards = [];\n  const deckCopy = [...getState().gameData.deck];\n  for (let i = 0; i < 4; i++) {\n    const random = Math.floor(Math.random() * deckCopy.length);\n    cards.push(deckCopy[random]);\n    deckCopy.splice(random, 1);\n  }\n  disptach(setPlayerDeck(cards.slice(0, 2)));\n  disptach(setEnemyDeck(cards.slice(2, 4)));\n  disptach(setDeckAction(deckCopy));\n};\n","import { setPlayerDeck, setDeck } from \"../Actions/action\";\nimport { calculatePoints } from \"../Helpers/calculateDeckPoints\";\nimport { stand } from \"./stand\";\n\nexport const hit = () => (dispatch, getState) => {\n  const copyDeck = [...getState().gameData.deck];\n  const random = Math.floor(Math.random() * (copyDeck.length - 1));\n  copyDeck.splice(random, 1);\n  dispatch(\n    setPlayerDeck(getState().gameData.playerDeck.concat(copyDeck[random]))\n  );\n  dispatch(setDeck(copyDeck));\n\n  if (calculatePoints(getState().gameData.playerDeck) > 21) {\n    dispatch(stand());\n  }\n};\n","import { calculatePoints } from \"../Helpers/calculateDeckPoints\";\nimport { setEnemyDeck, setDeck as setDeckAction } from \"../Actions/action\";\n\nexport const enemyHit = () => (dispatch, getState) => {\n  let randomChoice = Math.random() >= 0.5 ? 1 : 0;\n  const copyDeck = [...getState().gameData.deck];\n  const copyEnemyDeck = [...getState().gameData.enemyDeck];\n  while (randomChoice !== 1) {\n    const randomCard = Math.floor(Math.random() * copyDeck.length);\n    copyDeck.splice(randomCard, 1);\n    copyEnemyDeck.push(copyDeck[randomCard]);\n\n    if (calculatePoints(copyEnemyDeck) >= 19) {\n      randomChoice = 1;\n    } else {\n      randomChoice = Math.random() >= 0.5 ? 1 : 0;\n    }\n  }\n\n  dispatch(setEnemyDeck(copyEnemyDeck));\n  dispatch(setDeckAction(copyDeck));\n};\n","const initialState = {\n  playerPoints: null,\n  enemyPoints: null,\n  deck: [],\n  playerDeck: [],\n  enemyDeck: [],\n  winner: null\n};\n\nexport const gameData = (state = initialState, action) => {\n  switch (action.type) {\n    case \"setPlayerPoints\":\n      return {\n        ...state,\n        playerPoints: action.playerPoints\n      };\n    case \"setEnemyPoints\":\n      return {\n        ...state,\n        enemyPoints: action.enemyPoints\n      };\n    case \"setDeck\":\n      return {\n        ...state,\n        deck: action.deck\n      };\n    case \"setPlayerDeck\":\n      return {\n        ...state,\n        playerDeck: action.playerDeck\n      };\n    case \"setEnemyDeck\":\n      return {\n        ...state,\n        enemyDeck: action.enemyDeck\n      };\n    case \"setWinner\":\n      return {\n        ...state,\n        winner: action.winner\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { gameData } from \"./gameData\";\n\n// export const allReducer = combineReducers({\n//     gameData\n// })\n\nconst appReducer = combineReducers({\n  gameData\n});\n\nexport const allReducer = (state, action) => {\n  if (action.type === \"RESET_APP\") {\n    state = undefined;\n  }\n\n  return appReducer(state, action);\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { allReducer } from \"./Reducers\";\nimport Thunk from \"redux-thunk\";\n\nconst store = createStore(allReducer, applyMiddleware(Thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}